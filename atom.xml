<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Electric Dream</title>
  
  <subtitle>just try to do it</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/electricdream11/"/>
  <updated>2019-10-09T12:55:04.845Z</updated>
  <id>https://github.com/electricdream11/</id>
  
  <author>
    <name>fjb-fjb</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FPGA组合电路基础</title>
    <link href="https://github.com/electricdream11/2019/10/09/FPGA%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF%E5%9F%BA%E7%A1%80/"/>
    <id>https://github.com/electricdream11/2019/10/09/FPGA组合电路基础/</id>
    <published>2019-10-09T12:41:20.000Z</published>
    <updated>2019-10-09T12:55:04.845Z</updated>
    
    <content type="html"><![CDATA[<h1 id="FPGA组合电路基础"><a href="#FPGA组合电路基础" class="headerlink" title="FPGA组合电路基础"></a>FPGA组合电路基础</h1><a id="more"></a><h1 id="1-一般的verilog语法结构"><a href="#1-一般的verilog语法结构" class="headerlink" title="1.一般的verilog语法结构"></a>1.一般的verilog语法结构</h1><pre><code>module name</code></pre><p>   (<br>     Name of io<br>);<br>input   ;<br>output   ;</p><p>assign<br>always<br>initial<br>功能描述<br>函数和任务<br>endmodule</p><h1 id="2-基本的电路的实现"><a href="#2-基本的电路的实现" class="headerlink" title="2.基本的电路的实现"></a>2.基本的电路的实现</h1><p>  一、采用连续赋值语句实现门电路<br>   与：&amp;&amp;    或： ||  非 ！（只能使用这几种组合逻辑实现）<br>  实例：<br>  module yumen(a, b, q);<br>   input a;<br>   input b;<br>   output q;<br>   assign q =a &amp;&amp; b;<br>  endmodule</p><img src="/2019/10/09/FPGA组合电路基础/imag1.png"><p>  二、采用门级元件实现门电路<br>   module yumen(a,b,q);<br>    input a;<br>    input b;<br>    output q;<br>  and (q,a,b);   //还有nand(与非) or(或) nor(或非) not(非)<br>                 //xor(异或) nxor(同或)<br>   endmodule<br> <img src="/2019/10/09/FPGA组合电路基础/imag2.png"></p><p> 三、采用过程赋值语句实现门电路<br>   module yumen(a,b,q);<br>    input a;<br>    input b;<br>    output q;<br>     reg q;</p><p>   always@(*)<br>    q =  a &amp;&amp; b;  //q声明reg表明过程赋值，与always相呼应<br>  endmodule</p> <img src="/2019/10/09/FPGA组合电路基础/imag3.png"><p>//任何过程赋值的左侧变量必须是reg，除此之外的都必须是wire</p><h1 id="3-小提示"><a href="#3-小提示" class="headerlink" title="3.小提示"></a>3.小提示</h1><p>硬件语言描述的作用在于描述，而不是设计，要注意不要在没有实际的电路思路时尝试单纯依靠verilog来实现某种功能，会产生许多疑问。</p><h1 id="4-组合逻辑电路的分析和设计"><a href="#4-组合逻辑电路的分析和设计" class="headerlink" title="4.组合逻辑电路的分析和设计"></a>4.组合逻辑电路的分析和设计</h1><p>  使用真值表和卡诺图得到最简的逻辑，<br>  在考虑了功能冒险（两个变量以上变化且输出稳态值保持不变，主要在板级验证上解决）和逻辑冒险（卡诺图有相切项）后，具体的实现。</p><h1 id="5-组合逻辑电路的应用"><a href="#5-组合逻辑电路的应用" class="headerlink" title="5.组合逻辑电路的应用"></a>5.组合逻辑电路的应用</h1><p> 使用case语句的编码器：<br>  module Digitial_Encoder<br>  (<br>    I,O<br>  );<br>  input  wire [7:0]  I;<br>  output  reg [2:0]  O;<br>  always @(*)<br>   begin<br>   case(I)<br>  8’b0000_0001 : O=3’b000;<br>  8’b0000_0010 : O=3’b001;<br> 8’b0000_0100 : O=3’b010;<br> 8’b0000_1000 : O=3’b011;<br> 8’b0001_0000 : O=3’b100;<br> 8’b0010_0000 : O=3’b101;<br> 8’b0100_0000 : O=3’b110;<br> 8’b1000_0000 : O=3’b111;<br>  default: O =3’b000;<br>  endcase<br>  end<br>endmodule</p><img src="/2019/10/09/FPGA组合电路基础/imag4.png"><p>使用if语句的译码器：<br>module Digital_Prime_Encoder(I,O);<br>input wire [7:0] I;<br>output reg [2:0] O;<br>always@(*)<br>begin<br> if(I[7]==1’b0)   O=3’b000;<br>else if(I[6]==1’b0) O=3’b001;<br>else if(I[5]==1’b0) O=3’b010;<br>else if(I[4]==1’b0) O=3’b011;<br>else if(I[3]==1’b0) O=3’b100;<br>else if(I[2]==1’b0) O=3’b101;<br>else if(I[1]==1’b0) O=3’b110;<br>else if(I[0]==1’b0) O=3’b111;<br>else             O=3’b000;</p><p>end<br>endmodule</p><img src="/2019/10/09/FPGA组合电路基础/imag5.png"><h1 id="6-组合电路小结："><a href="#6-组合电路小结：" class="headerlink" title="6.组合电路小结："></a>6.组合电路小结：</h1><p>在声明模型的架构后，选择输入输出端是根据两种数据类型（reg和wire）来选择的。wire用于连续的赋值，数据是同步改变的（可以理解为敏感源为所有变量的过程赋值）。reg类型的数据是可以等待敏感变量发生赋值的，具有相应的延时效应。这样可以有效地区分过程和连续的进程，以此来防止两种类型的赋值发生在同一变量。功能部分的设计则是根据相应的组合电路的真值表或卡诺图公式得到。</p><h1 id="7-运算符号"><a href="#7-运算符号" class="headerlink" title="7.运算符号"></a>7.运算符号</h1><p>（+、-、  /、！（逻辑非）、<del>（取反）、&amp;（与）、</del>&amp;（与非）、|（或）、<del>|（或非）、^(异或)、</del>^（同或）、%（取模）、&lt;&lt;(逻辑左移)、&lt;（小于）、&lt;=（小于等于）、&gt;（大于））。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;FPGA组合电路基础&quot;&gt;&lt;a href=&quot;#FPGA组合电路基础&quot; class=&quot;headerlink&quot; title=&quot;FPGA组合电路基础&quot;&gt;&lt;/a&gt;FPGA组合电路基础&lt;/h1&gt;
    
    </summary>
    
    
      <category term="FPGA" scheme="https://github.com/electricdream11/categories/FPGA/"/>
    
    
      <category term="FPGA" scheme="https://github.com/electricdream11/tags/FPGA/"/>
    
      <category term="组合电路" scheme="https://github.com/electricdream11/tags/%E7%BB%84%E5%90%88%E7%94%B5%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>verilog语法基础</title>
    <link href="https://github.com/electricdream11/2019/10/06/verilog%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
    <id>https://github.com/electricdream11/2019/10/06/verilog语法基础/</id>
    <published>2019-10-06T12:43:27.000Z</published>
    <updated>2019-10-06T13:00:27.048Z</updated>
    
    <content type="html"><![CDATA[<p>Verilog语法基础是学习FPGA的开始</p><a id="more"></a><h1 id="1-verilog-HDL历史"><a href="#1-verilog-HDL历史" class="headerlink" title="1.verilog HDL历史"></a>1.verilog HDL历史</h1><p>  由OVI标准化，IEEE标准</p><h1 id="2-术语："><a href="#2-术语：" class="headerlink" title="2.术语："></a>2.术语：</h1><p>   HDL：硬件描述语言<br>   RTL：寄存器传送级定义<br>   行为建模：功能确定 || 结构化建模：有对应的硬件电路</p><h1 id="3-综合"><a href="#3-综合" class="headerlink" title="3.综合"></a>3.综合</h1><p>  将verilog代码转化为实际电路的过程</p><h1 id="4-语法规则："><a href="#4-语法规则：" class="headerlink" title="4.语法规则："></a>4.语法规则：</h1><p>  大小写和空白敏感</p><h1 id="5-组成："><a href="#5-组成：" class="headerlink" title="5.组成："></a>5.组成：</h1><p>  端口声明-&gt;数据类型声明-&gt;电路功能-&gt;时序规范</p><h1 id="6-数据类型："><a href="#6-数据类型：" class="headerlink" title="6.数据类型："></a>6.数据类型：</h1><p>  wire 网数据类型（节点）<br>  tri 三态节点<br>  Supply0 和 supply1 常数逻辑值<br>  reg  寄存器数据类型（并不对应物理寄存器，只是类似变量）<br>      只能在进程、任务或功能中赋值reg变量，不能是逻辑门输出和assign输出。</p><h1 id="7-输入输出规则"><a href="#7-输入输出规则" class="headerlink" title="7.输入输出规则"></a>7.输入输出规则</h1><p>Variabletype–input–output–inout<br>net———–Yes—-Yes—–Yes<br>register——No—–Yes—–No</p><h1 id="8-数字"><a href="#8-数字" class="headerlink" title="8.数字"></a>8.数字</h1><p>  <size>’type<num></num></size></p><h1 id="9-位算子"><a href="#9-位算子" class="headerlink" title="9.位算子"></a>9.位算子</h1><p>  ~：每位取反            &amp;：每位与<br>  |：  每位或              ^：异或<br>也有组合缩写算子</p><h1 id="10-算子："><a href="#10-算子：" class="headerlink" title="10.算子："></a>10.算子：</h1><p>  加减乘除取模（%）<br>  相等算子：==，！=，===（条件相等），！==（条件不等，所有的类型）<br>关系算子：</p><blockquote><p> &lt;  =  &gt;=  &lt;=<br>其他算子：包括大部分C语言算子</p></blockquote><h1 id="11-赋值声明："><a href="#11-赋值声明：" class="headerlink" title="11.赋值声明："></a>11.赋值声明：</h1><p>  左手侧（LHS）必须是net类型，右手侧主动的变化</p><h1 id="12-Initial：执行一次模块"><a href="#12-Initial：执行一次模块" class="headerlink" title="12.Initial：执行一次模块"></a>12.Initial：执行一次模块</h1><p>  always：重复执行</p><h1 id="13-进程赋值"><a href="#13-进程赋值" class="headerlink" title="13.进程赋值"></a>13.进程赋值</h1><p>  阻塞按顺序执行，<br>  非阻塞赋值不按顺序执行</p><h1 id="14-组合电路："><a href="#14-组合电路：" class="headerlink" title="14.组合电路："></a>14.组合电路：</h1><p>   对所有事件列表敏感<br>   时序电路：<br>   只对时钟和使能信号敏感</p><h1 id="15-if-else："><a href="#15-if-else：" class="headerlink" title="15.if-else："></a>15.if-else：</h1><p>   使用选择器依次选择条件</p><h1 id="16-case："><a href="#16-case：" class="headerlink" title="16. case："></a>16. case：</h1><p>   多路选择器，不能有交叠重复条件<br>    casez：忽略Z<br>    casex：忽略x和z，不当做逻辑值</p><h1 id="17-Forever："><a href="#17-Forever：" class="headerlink" title="17.Forever："></a>17.Forever：</h1><p>  无限循环，按时间间隔执行</p><h1 id="18-repeat："><a href="#18-repeat：" class="headerlink" title="18.repeat："></a>18.repeat：</h1><p>  有限次数，按次数执行</p><h1 id="19-while："><a href="#19-while：" class="headerlink" title="19.while："></a>19.while：</h1><p>   While的条件是确定的不可更改。</p><h1 id="20-时钟使能和触发器使能"><a href="#20-时钟使能和触发器使能" class="headerlink" title="20. 时钟使能和触发器使能"></a>20. 时钟使能和触发器使能</h1><p>   在敏感列表中申明的信号</p><h1 id="21-函数和任务"><a href="#21-函数和任务" class="headerlink" title="21.函数和任务"></a>21.函数和任务</h1><p>  函数描述了组合功能，任务显示了进程，用于显示这段进程供其他进程。</p><h1 id="22-常用的可综合语法"><a href="#22-常用的可综合语法" class="headerlink" title="22.常用的可综合语法"></a>22.常用的可综合语法</h1><p>常用的RTL语法结构如下：<br>模块声明：module endmodule.<br>端口声明：input，output，inout（inout的用法比较特殊，需要注意）。<br>信号类型：wire，reg，tri等，integer 常用语for语句中（reg，wire是最常用的，一般tri和integer用在测试脚本里）。<br>参数定义：paraneter，define。<br>运算操作符：各种逻辑操作符、移位操作符、算术操作符大多时可综合的（注：===与!==是不可综合的）。<br>比较判断：if else，case（casex，casez）default endcase.<br>连续赋值：assign，问号表达式（？：）。<br>always模块：（敏感表可以为电平、沿信号posedge/negedge；通常和0连用）。<br>Begin end（通俗的说，它就是C语言里的“{}”）。<br>任务定义：task endtask。<br>循环语句：for（用的也比较少，但是在一些特定的设计中使用它会起到事半功倍的效果）。<br>赋值符号：=和&lt;=（阻塞和非阻塞赋值，在具体设计中时很有讲究的）。</p><h1 id="22-实际的例子"><a href="#22-实际的例子" class="headerlink" title="22.实际的例子"></a>22.实际的例子</h1><p>module(<br>       a,<br>         b,</p><pre><code>  c);</code></pre><p> input reg a;<br> input wire b;  </p><p> output wire c;<br> assign c &lt;= a&b; //assign 左侧必须是wire类型</p><p>endmodule</p><p>module(<br>       Clk,<br>         Rst_n,</p><pre><code>   cnt);</code></pre><p>  input clk;<br>  input Rst_n;</p><p>  output cnt;   //output默认为wire类型，<br>                //  要赋值是需要申明为reg</p><p>  reg cnt;<br>  always@(posedge Clk or negedge Rst_n)<br>  begin<br>  if(!Rst_n)<br>  else<br>  cnt &lt;=Clk;<br>  end<br>endmodule</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Verilog语法基础是学习FPGA的开始&lt;/p&gt;
    
    </summary>
    
    
      <category term="FPGA" scheme="https://github.com/electricdream11/categories/FPGA/"/>
    
    
      <category term="FPGA" scheme="https://github.com/electricdream11/tags/FPGA/"/>
    
      <category term="verilog" scheme="https://github.com/electricdream11/tags/verilog/"/>
    
  </entry>
  
  <entry>
    <title>可编程逻辑基础</title>
    <link href="https://github.com/electricdream11/2019/10/06/%E5%8F%AF%E7%BC%96%E7%A8%8B%E9%80%BB%E8%BE%91%E5%9F%BA%E7%A1%80/"/>
    <id>https://github.com/electricdream11/2019/10/06/可编程逻辑基础/</id>
    <published>2019-10-06T07:39:27.000Z</published>
    <updated>2019-10-06T11:08:07.194Z</updated>
    
    <content type="html"><![CDATA[<p>可编程逻辑器件</p><h1 id="1-可编程逻辑器件将电路连线简化。"><a href="#1-可编程逻辑器件将电路连线简化。" class="headerlink" title="1.可编程逻辑器件将电路连线简化。"></a>1.可编程逻辑器件将电路连线简化。</h1><h1 id="2-CPLD与FPGA的原理：化简电路后级联。"><a href="#2-CPLD与FPGA的原理：化简电路后级联。" class="headerlink" title="2.CPLD与FPGA的原理：化简电路后级联。"></a>2.CPLD与FPGA的原理：化简电路后级联。</h1><a id="more"></a> <h1 id="3-逻辑器件的历史："><a href="#3-逻辑器件的历史：" class="headerlink" title="3.逻辑器件的历史："></a>3.逻辑器件的历史：</h1><p>一、TTL逻辑设计：<br>采用真值表构建模型，利用卡诺图化简后得到逻辑表达式。TTL采用乘积和的模式设计，组成与门和多或门组成。<br>二、PAL可编程阵列逻辑：<br>逻辑门与输出寄存器固定，输入与与门构成乘积项，与乘积项和寄存项构成宏单元。跨线编程依靠浮珊晶体管（FAMOS或FLOTOX），工作方式分别为电擦除和紫光擦除。<br>三、CPLD复杂可编程逻辑器件：<br>利用可编程逻辑阵列的模块（LAB），<br>并且使用了可控乘积项提高效率。可编程互联阵列（PI）采用EPROM等技术编程。IO模块都采用了更加合理的结构。采用JTAG接口实现ISP（系统编程）。提高了可编程的器件的数量。</p><h1 id="4-从CPLD到FPGA的改善"><a href="#4-从CPLD到FPGA的改善" class="headerlink" title="4.从CPLD到FPGA的改善"></a>4.从CPLD到FPGA的改善</h1><p>一、FPGA的LAB采用逻辑模块来提供单元，并成阵列式的分布于网格线中。<br>二、加入的查找表（LUT）可以有效地提高逻辑器件的利用率。<br>三、可编程的寄存器可以灵活的适应各种逻辑输出。<br>四、FPGA内依靠寄存器链和LAB的级联实现进位，不需要进位逻辑块。<br>五、高级的FPGA采用ALM（自适应逻辑模块），基于LE并包括专用资源和LUT以提高利用效率。<br>六、FPGA中的IO模块支持各种的标准，有电流驱动能力。可设置IO的开漏等等可以提高效率的模块。主要有输入、输出、使能模块。<br>七、存储器模块，嵌入式乘法器，高速收发器等定制的模块<br>八、FPGA的时钟：特殊的结构控制并向器件中的同步逻辑扇出时钟。自带时钟控制模块可以配置时钟资源。<br>九、SRAM单元技术用于实现互联和LUT功能级进行编程。行列互联结是易失的，上电时才可以编程。SRAM编程单元也需要上电后进行编程。</p><h1 id="5-ASIC"><a href="#5-ASIC" class="headerlink" title="5.ASIC"></a>5.ASIC</h1><p>一、Altera ASIC是ASIC，用于测试ASIC系统，可以有效地提高ASIC的开发效率。</p><h1 id="6-CPLD和FPAG的对比。"><a href="#6-CPLD和FPAG的对比。" class="headerlink" title="6.CPLD和FPAG的对比。"></a>6.CPLD和FPAG的对比。</h1><p>  CPLD是非易失编程，FPGA是易失的编程设计。<br>  小中型设计            大型设计</p><h1 id="7-设计流程"><a href="#7-设计流程" class="headerlink" title="7.设计流程"></a>7.设计流程</h1><p>   设计输入-&gt;功能仿真-&gt;综合仿真-&gt;布局布线-&gt;门级仿真（可选）<br>                                             |<br>                                          PCB布局</p><h1 id="8-总结："><a href="#8-总结：" class="headerlink" title="8.总结："></a>8.总结：</h1><p>FPGA提高逻辑设计的速度。</p><img src="/2019/10/06/可编程逻辑基础/PLD_basic.png"> ]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可编程逻辑器件&lt;/p&gt;
&lt;h1 id=&quot;1-可编程逻辑器件将电路连线简化。&quot;&gt;&lt;a href=&quot;#1-可编程逻辑器件将电路连线简化。&quot; class=&quot;headerlink&quot; title=&quot;1.可编程逻辑器件将电路连线简化。&quot;&gt;&lt;/a&gt;1.可编程逻辑器件将电路连线简化。&lt;/h1&gt;&lt;h1 id=&quot;2-CPLD与FPGA的原理：化简电路后级联。&quot;&gt;&lt;a href=&quot;#2-CPLD与FPGA的原理：化简电路后级联。&quot; class=&quot;headerlink&quot; title=&quot;2.CPLD与FPGA的原理：化简电路后级联。&quot;&gt;&lt;/a&gt;2.CPLD与FPGA的原理：化简电路后级联。&lt;/h1&gt;
    
    </summary>
    
    
      <category term="FPGA" scheme="https://github.com/electricdream11/categories/FPGA/"/>
    
    
      <category term="FPGA" scheme="https://github.com/electricdream11/tags/FPGA/"/>
    
  </entry>
  
  <entry>
    <title>1003_FPGA</title>
    <link href="https://github.com/electricdream11/2019/10/03/1003_FPGA/"/>
    <id>https://github.com/electricdream11/2019/10/03/1003_FPGA/</id>
    <published>2019-10-03T12:29:17.000Z</published>
    <updated>2019-10-04T06:24:24.227Z</updated>
    
    <content type="html"><![CDATA[<p>FPGA是这个博客的主要的内容，认真的学习好相应的内容是解决这个问题的关键。不定时的上传一些学习过程可以有效地解决资源不足的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;FPGA是这个博客的主要的内容，认真的学习好相应的内容是解决这个问题的关键。不定时的上传一些学习过程可以有效地解决资源不足的问题。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="test" scheme="https://github.com/electricdream11/categories/test/"/>
    
    
      <category term="test" scheme="https://github.com/electricdream11/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>myaim</title>
    <link href="https://github.com/electricdream11/2019/10/03/myaim/"/>
    <id>https://github.com/electricdream11/2019/10/03/myaim/</id>
    <published>2019-10-03T08:01:58.000Z</published>
    <updated>2019-10-04T06:24:55.871Z</updated>
    
    <content type="html"><![CDATA[<p>test for categories</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;test for categories&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="test" scheme="https://github.com/electricdream11/categories/test/"/>
    
    
      <category term="test" scheme="https://github.com/electricdream11/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>myfirstarticle</title>
    <link href="https://github.com/electricdream11/2019/10/02/myfirstarticle/"/>
    <id>https://github.com/electricdream11/2019/10/02/myfirstarticle/</id>
    <published>2019-10-02T08:44:32.000Z</published>
    <updated>2019-10-04T06:25:06.956Z</updated>
    
    <content type="html"><![CDATA[<img src="/2019/10/02/myfirstarticle/test.jpg" title="test"><p>测试一下功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2019/10/02/myfirstarticle/test.jpg&quot; title=&quot;test&quot;&gt;

&lt;p&gt;测试一下功能。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="test" scheme="https://github.com/electricdream11/categories/test/"/>
    
    
      <category term="test" scheme="https://github.com/electricdream11/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>hello blog</title>
    <link href="https://github.com/electricdream11/2019/10/01/hello-blog/"/>
    <id>https://github.com/electricdream11/2019/10/01/hello-blog/</id>
    <published>2019-10-01T04:29:10.000Z</published>
    <updated>2019-10-04T06:24:34.579Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="test" scheme="https://github.com/electricdream11/categories/test/"/>
    
    
      <category term="test" scheme="https://github.com/electricdream11/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://github.com/electricdream11/2019/10/01/Hello-World/"/>
    <id>https://github.com/electricdream11/2019/10/01/Hello-World/</id>
    <published>2019-10-01T03:08:35.851Z</published>
    <updated>2019-10-04T06:24:45.785Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="test" scheme="https://github.com/electricdream11/categories/test/"/>
    
    
      <category term="test" scheme="https://github.com/electricdream11/tags/test/"/>
    
  </entry>
  
</feed>
